"""Visualize screening-stage metrics to support model selection."""

from __future__ import annotations

import argparse
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "results",
        type=Path,
        nargs="+",
        help="One or more CSV files generated by run_screening.py",
    )
    parser.add_argument(
        "--output-dir",
        type=Path,
        default=Path("outputs/visualizations"),
        help="Directory to store visualizations (default: outputs/visualizations)",
    )
    parser.add_argument(
        "--include-imputers",
        nargs="+",
        help="Keep only selected imputers (e.g. knn llm baseline simple_most_frequent)",
    )
    parser.add_argument(
        "--include-mechanisms",
        nargs="+",
        help="Keep only selected missingness mechanisms (e.g. mar mcar)",
    )
    parser.add_argument(
        "--include-rates",
        nargs="+",
        help="Keep only selected missing rates (e.g. 05 15 30)",
    )
    parser.add_argument(
        "--language",
        choices=["en", "zh"],
        default="en",
        help="Language for titles and legends (default: en)",
    )
    parser.add_argument(
        "--show",
        action="store_true",
        help="Display figures after saving",
    )
    return parser.parse_args()


def _load_results(paths: list[Path]) -> pd.DataFrame:
    frames = []
    for path in paths:
        if not path.exists():
            raise FileNotFoundError(path)
        frame = pd.read_csv(path)
        frame["source_file"] = path.name
        frames.append(frame)
    return pd.concat(frames, ignore_index=True)


def _filter(df: pd.DataFrame, *, args: argparse.Namespace) -> pd.DataFrame:
    filtered = df.copy()
    if args.include_imputers:
        allowed = {item.lower() for item in args.include_imputers}
        filtered = filtered[filtered["imputer"].str.lower().isin(allowed)]
    if args.include_mechanisms:
        allowed = {item.lower() for item in args.include_mechanisms}
        filtered = filtered[filtered["mechanism"].str.lower().isin(allowed)]
    if args.include_rates:
        allowed = {item for item in args.include_rates}
        filtered = filtered[filtered["missing_rate"].isin(allowed)]
    return filtered


IMPUTER_LABELS_EN = {
    "baseline": "Baseline (Original)",
    "knn": "KNN Imputer",
    "llm": "LLM Imputer",
    "simple_most_frequent": "Simple Imputer (Most Frequent)",
    "simple_placeholder": "Simple Imputer (Placeholder)",
}

IMPUTER_LABELS_ZH = {
    "baseline": "原始基线",
    "knn": "KNN 插补",
    "llm": "LLM 插补",
    "simple_most_frequent": "简单插补-众数",
    "simple_placeholder": "简单插补-占位符",
}


def _label_imputer(series: pd.Series, language: str) -> pd.Series:
    mapping = IMPUTER_LABELS_EN if language == "en" else IMPUTER_LABELS_ZH
    return series.map(mapping).fillna(series)


def plot_metrics(df: pd.DataFrame, output_dir: Path, *, language: str) -> None:
    output_dir.mkdir(parents=True, exist_ok=True)

    titles = {
        "en": {
            "macro_f1": "Macro F1 vs. Missing Rate",
            "roc_auc": "ROC-AUC vs. Missing Rate",
            "dp_diff": "Demographic Parity Difference vs. Missing Rate",
        },
        "zh": {
            "macro_f1": "宏平均F1 与缺失率",
            "roc_auc": "ROC-AUC 与缺失率",
            "dp_diff": "人口均等差异 与缺失率",
        },
    }

    xlabel = "Missing rate (%)" if language == "en" else "缺失率 (%)"
    ylabel_macro = "Macro F1" if language == "en" else "宏平均F1"
    ylabel_roc = "ROC-AUC"
    ylabel_dp = "DP Diff" if language == "en" else "人口均等差异"
    legend_title = "Imputation" if language == "en" else "插补方法"

    colors = {
        "baseline": "#4C566A",
        "knn": "#5E81AC",
        "llm": "#BF616A",
        "simple_most_frequent": "#A3BE8C",
        "simple_placeholder": "#EBCB8B",
    }

    temp = df.copy()
    temp["imputer_label"] = _label_imputer(temp["imputer"], language)

    axis_ylabel = {
        "macro_f1": ylabel_macro,
        "roc_auc": ylabel_roc,
        "dp_diff": ylabel_dp,
    }

    for metric, title in titles[language].items():
        pivot = (
            temp.pivot_table(
                index="missing_rate",
                columns="imputer_label",
                values=metric,
                aggfunc="mean",
            )
            .sort_index()
        )

        ax = pivot.plot(marker="o", linewidth=2)

        for line in ax.get_lines():
            label = line.get_label()
            for raw_name, pretty_name in temp.drop_duplicates("imputer")[
                ["imputer", "imputer_label"]
            ].itertuples(index=False):
                if pretty_name == label:
                    color = colors.get(raw_name)
                    if color:
                        line.set_color(color)
                    break
        ax.set_title(title)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(axis_ylabel[metric])
        ax.legend(title=legend_title)
        ax.grid(True, linestyle="--", alpha=0.3)

        fig = ax.get_figure()
        filename = output_dir / f"{metric}_{language}.png"
        fig.savefig(filename, dpi=200, bbox_inches="tight")
        plt.close(fig)


def plot_radar(df: pd.DataFrame, output_dir: Path, *, language: str) -> None:
    output_dir.mkdir(parents=True, exist_ok=True)

    columns = ["macro_f1", "roc_auc", "dp_diff"]
    summary = df.groupby("imputer")[columns].mean()

    # Store raw averages for reporting
    summary_path = output_dir / f"imputer_summary_{language}.csv"
    summary.to_csv(summary_path)

    metrics = columns
    num_vars = len(metrics)
    angles = [n / float(num_vars) * 2 * 3.14159265 for n in range(num_vars)]
    angles += angles[:1]

    labels = _label_imputer(summary.index.to_series(), language)

    fig, ax = plt.subplots(figsize=(7, 7), subplot_kw=dict(polar=True))

    for imputer, label in zip(summary.index, labels):
        values = summary.loc[imputer, metrics].tolist()
        values += values[:1]
        ax.plot(angles, values, label=label)
        ax.fill(angles, values, alpha=0.1)

    metric_labels = {
        "en": ["Macro F1", "ROC-AUC", "DP Diff"],
        "zh": ["宏平均F1", "ROC-AUC", "人口均等差异"],
    }

    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(metric_labels[language])
    ax.set_title(
        "Imputer Performance Radar" if language == "en" else "插补方法综合雷达图"
    )
    ax.legend(loc="upper right", bbox_to_anchor=(1.35, 1.05))

    path = output_dir / f"imputer_radar_{language}.png"
    fig.savefig(path, dpi=200, bbox_inches="tight")
    plt.close(fig)


def plot_bar_topk(
    df: pd.DataFrame,
    output_dir: Path,
    *,
    language: str,
    k: int = 5,
    metric: str = "macro_f1",
) -> None:
    output_dir.mkdir(parents=True, exist_ok=True)

    topk = df.sort_values(metric, ascending=False).head(k)
    axis_title = (
        f"Top {k} Experiments by {metric.upper()}"
        if language == "en"
        else f"宏 F1 Top {k} 实验"
    )
    ylabel = metric.upper() if language == "en" else "宏 F1"

    ax = topk.plot(
        x="experiment_id",
        y=metric,
        kind="bar",
        color="#5E81AC",
        legend=False,
    )
    ax.set_ylabel(ylabel)
    ax.set_title(axis_title)
    ax.tick_params(axis="x", labelrotation=30)
    ax.grid(True, axis="y", linestyle="--", alpha=0.3)

    fig = ax.get_figure()
    path = output_dir / f"top{k}_{metric}_{language}.png"
    fig.savefig(path, dpi=200, bbox_inches="tight")
    plt.close(fig)


def plot_heatmap(df: pd.DataFrame, output_dir: Path, *, language: str) -> None:
    pivot = df.pivot_table(
        index="imputer",
        columns="missing_rate",
        values="macro_f1",
        aggfunc="mean",
    )
    pivot_label = pivot.rename(index=lambda val: IMPUTER_LABELS_EN.get(val, val))

    fig, ax = plt.subplots(figsize=(8, 4))
    cax = ax.imshow(pivot_label, cmap="YlGnBu", aspect="auto")
    ax.set_xticks(range(pivot_label.shape[1]))
    ax.set_xticklabels(pivot_label.columns)
    ax.set_yticks(range(pivot_label.shape[0]))
    ax.set_yticklabels(pivot_label.index)

    title = (
        "Macro F1 Heatmap" if language == "en" else "宏 F1 热力图"
    )
    ax.set_title(title)
    ax.set_xlabel("Missing rate (%)" if language == "en" else "缺失率 (%)")
    ax.set_ylabel("Imputation" if language == "en" else "插补方法")
    fig.colorbar(cax, ax=ax)

    fig.savefig(output_dir / f"macro_f1_heatmap_{language}.png", dpi=200, bbox_inches="tight")
    plt.close(fig)


def main() -> None:
    args = parse_args()
    df = _load_results(args.results)
    df = _filter(df, args=args)

    if df.empty:
        raise SystemExit("No data left after filtering; cannot generate plots.")

    output_dir = args.output_dir
    language = args.language

    plot_metrics(df, output_dir, language=language)
    plot_radar(df, output_dir, language=language)
    plot_bar_topk(df, output_dir, language=language)
    plot_heatmap(df, output_dir, language=language)

    if args.show:
        plt.show()

    print(f"Visualizations saved to: {output_dir.resolve()}")


if __name__ == "__main__":
    main()

